<?php

namespace DuncanMcClean\GuestEntries\Http\Controllers;

use Carbon\Carbon;
use DuncanMcClean\GuestEntries\Events\GuestEntryCreated;
use DuncanMcClean\GuestEntries\Events\GuestEntryDeleted;
use DuncanMcClean\GuestEntries\Events\GuestEntryUpdated;
use DuncanMcClean\GuestEntries\Exceptions\AssetContainerNotSpecified;
use DuncanMcClean\GuestEntries\Http\Requests\DestroyRequest;
use DuncanMcClean\GuestEntries\Http\Requests\StoreRequest;
use DuncanMcClean\GuestEntries\Http\Requests\UpdateRequest;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;
use Statamic\Facades\Asset;
use Statamic\Facades\AssetContainer;
use Statamic\Facades\Collection;
use Statamic\Facades\Entry;
use Statamic\Facades\Site as SiteFacade;
use Statamic\Fields\Field;
use Statamic\Fieldtypes\Assets\Assets as AssetFieldtype;
use Statamic\Fieldtypes\Date as DateFieldtype;
use Statamic\Fieldtypes\Replicator;
use Statamic\Sites\Site;

class GuestEntryController extends Controller
{
    protected $ignoredParameters = ['_token', '_collection', '_id', '_redirect', '_error_redirect', '_request', 'slug', 'published'];

    public function store(StoreRequest $request)
    {
        if (! $this->honeypotPassed($request)) {
            return $this->withSuccess($request);
        }

        $collection = Collection::find($request->get('_collection'));

        /** @var \Statamic\Entries\Entry $entry */
        $entry = Entry::make()
            ->collection($collection->handle())
            ->locale($this->guessSiteFromRequest($request))
            ->published(false);

        if ($collection->dated()) {
            $this->ignoredParameters[] = 'date';
            $entry->date($request->get('date') ?? now());
        }

        if ($request->has('published')) {
            $entry->published($request->get('published') == '1' || $request->get('published') == 'true' ? true : false);
        }

        foreach (Arr::except($request->all(), $this->ignoredParameters) as $key => $value) {
            /** @var \Statamic\Fields\Field $blueprintField */
            $field = $collection->entryBlueprint()->field($key);

            $entry->set(
                $key,
                $field
                    ? $this->processField($field, $key, $value, $request)
                    : $value
            );
        }

        if ($request->has('slug')) {
            $entry->slug($request->get('slug'));
        } elseif ($collection->entryBlueprint()->hasField('title')) {
            $entry->slug(
                Str::slug($request->get('title') ?? $entry->autoGeneratedTitle(), '-', $entry->site()->lang())
            );
        }

        $entry->touch();

        event(new GuestEntryCreated($entry));

        return $this->withSuccess($request);
    }

    public function update(UpdateRequest $request)
    {
        if (! $this->honeypotPassed($request)) {
            return $this->withSuccess($request);
        }

        /** @var \Statamic\Entries\Entry $entry */
        $entry = Entry::find($request->get('_id'));

        /** @var array $data */
        $data = $entry->data()->toArray();

        if ($request->has('slug')) {
            $entry->slug($request->get('slug'));
        }

        if ($entry->collection()->dated()) {
            $this->ignoredParameters[] = 'date';
        }

        if ($request->has('published')) {
            $entry->published($request->get('published') == 1 || $request->get('published') == 'true' ? true : false);
        }

        foreach (Arr::except($request->all(), $this->ignoredParameters) as $key => $value) {
            /** @var \Statamic\Fields\Field $blueprintField */
            $field = $entry->blueprint()->field($key);

            $data[$key] = $field
                ? $this->processField($field, $key, $value, $request)
                : $value;
        }

        if ($entry->revisionsEnabled()) {
            /** @var \Statamic\Revisions\Revision $revision */
            $revision = $entry->makeWorkingCopy();
            $revision->id($entry->id());

            $revision->attributes([
                'title' => $entry->get('title'),
                'slug' => $entry->slug(),
                'published' => $entry->published(),
                'data' => $data,
            ]);

            if ($entry->collection()->dated() && $request->has('date')) {
                $revision->date($request->get('date'));
            }

            if ($request->user()) {
                $revision->user($revision->user());
            }

            $revision->message(__('Guest Entry Updated'));
            $revision->action('revision');

            $revision->save();
            $entry->save();
        } else {
            $entry->data($data);

            if ($entry->collection()->dated() && $request->has('date')) {
                $entry->date($request->get('date'));
            }

            $entry->touch();
        }

        event(new GuestEntryUpdated($entry));

        return $this->withSuccess($request);
    }

    public function destroy(DestroyRequest $request)
    {
        if (! $this->honeypotPassed($request)) {
            return $this->withSuccess($request);
        }

        $entry = Entry::find($request->get('_id'));

        $entry->delete();

        event(new GuestEntryDeleted($entry));

        return $this->withSuccess($request);
    }

    protected function processField(Field $field, $key, $value, $request): mixed
    {
        if ($field && $field->fieldtype() instanceof Replicator) {
            $replicatorField = $field;

            return collect($value)
                ->map(function ($item, $index) use ($replicatorField, $request) {
                    $set = $item['type'] ?? array_values($replicatorField->fieldtype()->config('sets'))[0];

                    return collect($item)
                        ->reject(function ($value, $fieldHandle) {
                            return $fieldHandle === 'type';
                        })
                        ->map(function ($value, $fieldHandle) use ($replicatorField, $index, $set, $request) {
                            $field = collect($set['fields'])
                                ->where('handle', $fieldHandle)
                                ->map(function ($field) {
                                    return new Field($field['handle'], $field['field']);
                                })
                                ->first();

                            if (! $field) {
                                return $value;
                            }

                            $key = "{$replicatorField->handle()}.{$index}.{$fieldHandle}";

                            return $field
                                ? $this->processField($field, $key, $value, $request)
                                : $value;
                        })
                        ->merge([
                            'type' => $item['type'] ?? array_keys($replicatorField->fieldtype()->config('sets'))[0],
                        ])
                        ->toArray();
                })
                ->toArray();
        }

        if ($field && $field->fieldtype() instanceof AssetFieldtype) {
            $value = $this->uploadFile($key, $field, $request);
        }

        if ($field && $field->fieldtype() instanceof DateFieldtype) {
            $format = $field->fieldtype()->config(
                'format',
                strlen($value) > 10 ? $field->fieldtype()::DEFAULT_DATETIME_FORMAT : $field->fieldtype()::DEFAULT_DATE_FORMAT
            );

            $value = Carbon::parse($value)->format($format);
        }

        return $value;
    }

    protected function uploadFile(string $key, Field $field, Request $request)
    {
        if (! isset($field->config()['container'])) {
            throw new AssetContainerNotSpecified("Please specify an asset container on your [{$key}] field, in order for file uploads to work.");
        }

        /** @var \Statamic\Assets\AssetContainer $assetContainer */
        $assetContainer = AssetContainer::findByHandle($field->config()['container']);

        $files = [];

        // Handle uploaded files.
        $uploadedFiles = $request->file($key);

        if (! is_array($uploadedFiles)) {
            $uploadedFiles = [$uploadedFiles];
        }

        $uploadedFiles = collect($uploadedFiles)
            ->each(function ($file) use ($key) {
                if (in_array(trim(strtolower($file->getClientOriginalExtension())), ['php', 'php3', 'php4', 'php5', 'phtml'])) {
                    $validator = Validator::make([], []);
                    $validator->errors()->add($key, __('Failed to upload.'));

                    throw new ValidationException($validator);
                }
            })
            ->filter()
            ->toArray();

        /* @var \Illuminate\Http\Testing\File $file */
        foreach ($uploadedFiles as $uploadedFile) {
            $path = '/'.$uploadedFile->storeAs(
                isset($field->config()['folder'])
                    ? $field->config()['folder']
                    : '',
                now()->timestamp.'-'.$uploadedFile->getClientOriginalName(),
                $assetContainer->diskHandle()
            );

            // Does path start with a '/'? If so, strip it off.
            if (substr($path, 0, 1) === '/') {
                $path = substr($path, 1);
            }

            // Ensure asset is created in Statamic (otherwise, it won't show up in
            // the Control Panel for sites with the Stache watcher disabled).
            $asset = Asset::make()
                ->container($assetContainer->handle())
                ->path($path);

            $asset->save();

            // Push to the array
            $files[] = $path;
        }

        // Handle existing files.
        $existingFiles = $request->get($key, []);

        foreach ($existingFiles as $existingFile) {
            $files[] = $existingFile;
        }

        if (count($files) === 0) {
            return null;
        }

        if (count($files) === 1) {
            return $files[0];
        }

        return $files;
    }

    protected function honeypotPassed(Request $request): ?bool
    {
        $honeypot = config('guest-entries.honeypot');

        if (! $honeypot) {
            return true;
        }

        return empty($request->get($honeypot));
    }

    protected function guessSiteFromRequest($request): Site
    {
        if ($site = $request->get('site')) {
            return SiteFacade::get($site);
        }

        foreach (SiteFacade::all() as $site) {
            if (Str::contains($request->url(), $site->url())) {
                return $site;
            }
        }

        if ($referer = $request->header('referer')) {
            foreach (SiteFacade::all() as $site) {
                if (Str::contains($referer, $site->url())) {
                    return $site;
                }
            }
        }

        return SiteFacade::current();
    }

    protected function withSuccess(Request $request, array $data = [])
    {
        if ($request->wantsJson()) {
            $data = array_merge($data, [
                'status' => 'success',
                'message' => null,
            ]);

            return response()->json($data);
        }

        $request->session()->flash('guest-entries.success', true);

        return $request->_redirect ?
            redirect($request->_redirect)->with($data)
            : back()->with($data);
    }
}
